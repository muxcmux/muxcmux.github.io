webpackHotUpdate("app",{

/***/ "./js/snake.js":
/*!*********************!*\
  !*** ./js/snake.js ***!
  \*********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Snake; });\nclass Snake {\n  constructor(element) {\n    this.element = element;\n    this.canvas = element.getElementsByTagName('canvas')[0];\n    this.setupCanvas();\n    this.setupGrid();\n    this.beginModal = element.getElementsByClassName('snake-begin-modal')[0];\n    this.endModal = element.getElementsByClassName('snake-end-modal')[0];\n    this.hiScore = element.getElementsByClassName('snake-hi-score')[0];\n    this.keyIsPressed = false;\n    this.baseSpeed = 8;\n    this.speedGainPerLevel = 4;\n    this.then = Date.now();\n    this.snakeArray;\n    this.direction, this.food;\n    this.score, this.level, this.speed;\n    this.now, this.then, this.elapsed, this.msPerFrame;\n    this.playing = false;\n    this.attachControls();\n  }\n\n  done() {\n    this.beginModal.classList.add('invisible');\n    this.endModal.classList.add('invisible');\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  countdown() {\n    if (this.playing) return;\n    this.playing = true;\n    this.beginModal.classList.remove('invisible');\n    const text = [3, 2, 1, 'Go!'];\n    setTimeout(() => {\n      this.init();\n    }, 1e3 * text.length + 1);\n\n    for (let i = 0; i < text.length; i++) {\n      setTimeout(() => {\n        this.beginModal.textContent = text[i];\n      }, 1e3 * i);\n    }\n  }\n\n  getColor(color) {\n    return window.getComputedStyle(this.element.getElementsByClassName(color)[0]).color;\n  }\n\n  setupGrid() {\n    const idealCell = {\n      width: 20,\n      height: 20\n    };\n    const gridWidth = Math.round(this.width / idealCell.width);\n    const cellWidth = this.width / gridWidth;\n    const gridHeight = Math.round(this.height / idealCell.height);\n    const cellHeight = this.height / gridHeight;\n    const slots = [];\n\n    for (let i = 0; i < gridWidth; i++) {\n      for (let j = 0; j < gridHeight; j++) {\n        slots.push({\n          x: i,\n          y: j\n        });\n      }\n    }\n\n    this.grid = {\n      slots,\n      width: gridWidth,\n      height: gridHeight,\n      cell: {\n        width: cellWidth,\n        height: cellHeight\n      }\n    };\n  }\n\n  setupCanvas() {\n    const dpr = window.devicePixelRatio || 1;\n    const rect = this.canvas.getBoundingClientRect();\n    const rectWidth = rect.width;\n    const rectHeight = rect.height;\n    this.canvas.width = rectWidth * dpr;\n    this.canvas.height = rectHeight * dpr;\n    this.canvas.style.width = rectWidth + 'px';\n    this.canvas.style.height = rectHeight + 'px';\n    this.ctx = this.canvas.getContext('2d');\n    this.ctx.scale(dpr, dpr);\n    this.width = rectWidth;\n    this.height = rectHeight;\n  }\n\n  init() {\n    this.beginModal.classList.add('invisible');\n    this.endModal.classList.add('invisible');\n    this.playing = true;\n    this.direction = \"right\";\n    this.score = 0;\n    this.level = 0;\n    this.increaseLevel();\n    this.createSnake();\n    this.createFood();\n    this.loop = requestAnimationFrame(() => this.paint());\n  }\n\n  increaseLevel() {\n    this.level += 1;\n    this.speed = this.baseSpeed + this.level * this.speedGainPerLevel;\n    this.msPerFrame = 1000 / this.speed;\n  }\n\n  createSnake() {\n    this.snakeArray = [];\n    const length = 5;\n    const center = {\n      x: ~~(this.grid.width / 2),\n      y: ~~(this.grid.height / 2)\n    };\n\n    for (let i = length - 1; i >= 0; i--) {\n      this.snakeArray.push({\n        x: center.x + i,\n        y: center.y\n      });\n    }\n  }\n\n  getAvailableSlots() {\n    const availableSlots = [];\n\n    for (let i = 0; i < this.grid.slots.length; i++) {\n      const slot = this.grid.slots[i];\n\n      for (let s = 0; s < this.snakeArray.length; s++) {\n        const snake = this.snakeArray[s];\n\n        if (snake.x != slot.x && snake.y != slot.y) {\n          availableSlots.push(slot);\n        }\n      }\n    }\n\n    return availableSlots;\n  }\n\n  createFood() {\n    const slots = this.getAvailableSlots();\n    this.food = slots[~~(Math.random() * (slots.length - 1))];\n  }\n\n  blowUp(cell) {\n    cancelAnimationFrame(this.loop);\n\n    for (let i = cell; i < this.snakeArray.length; i++) {\n      this.paintCell(this.snakeArray[i].x, this.snakeArray[i].y, this.getColor('snake-cell-color'));\n    }\n\n    if (cell != this.snakeArray.length) {\n      this.paintCell(this.snakeArray[cell].x, this.snakeArray[cell].y, this.getColor('snake-dead-color'));\n      setTimeout(() => {\n        this.blowUp(cell + 1);\n      }, 20);\n    } else {\n      let txt = \"Weak.\";\n      if (this.score >= 10 && this.score < 20) txt = \"Srsly?\";\n      if (this.score >= 20 && this.score < 30) txt = \"Not bad!\";\n      if (this.score >= 30 && this.score < 40) txt = \"Awesome!\";\n      if (this.score >= 40 && this.score < 50) txt = \"Insane!\";\n      if (this.score >= 50 && this.score < 60) txt = \"Wicked!\";\n      if (this.score >= 60 && this.score < 70) txt = \"Outstanding!\";\n      if (this.score >= 70) txt = \"Get a life.\";\n      this.hiScore.textContent = txt + \" Hi score: \" + this.score;\n      this.endModal.classList.remove('invisible');\n      this.playing = false;\n    }\n  }\n\n  paint() {\n    this.now = Date.now();\n    this.elapsed = this.now - this.then;\n\n    if (this.elapsed > this.msPerFrame) {\n      this.then = this.now - this.elapsed % this.msPerFrame;\n      this.ctx.clearRect(0, 0, this.width, this.height);\n      let nx = this.snakeArray[0].x;\n      let ny = this.snakeArray[0].y;\n      if (this.direction == \"right\") nx++;else if (this.direction == \"left\") nx--;else if (this.direction == \"up\") ny--;else if (this.direction == \"down\") ny++;\n\n      if (nx <= -1 || nx >= this.grid.width || ny <= -1 || ny >= this.grid.height || this.checkCollision(nx, ny, this.snakeArray)) {\n        // Game over\n        this.blowUp(0);\n        return;\n      }\n\n      let tail;\n\n      if (nx == this.food.x && ny == this.food.y) {\n        tail = {\n          x: nx,\n          y: ny\n        };\n        this.score++;\n        if (!(this.score % 10)) this.increaseLevel();\n        this.createFood();\n      } else {\n        tail = this.snakeArray.pop();\n        tail.x = nx;\n        tail.y = ny;\n      }\n\n      this.snakeArray.unshift(tail);\n\n      for (let i = 0; i < this.snakeArray.length; i++) {\n        this.paintCell(this.snakeArray[i].x, this.snakeArray[i].y, this.getColor('snake-cell-color'));\n      }\n\n      this.paintCell(this.food.x, this.food.y, this.getColor('snake-food-color'));\n      const scoreText = \"Level: \" + this.level + \" Score: \" + this.score;\n      this.ctx.font = 'normal 12pt Menlo, Consolas, Courier';\n      this.ctx.textAlign = 'left';\n      this.ctx.fillStyle = this.getColor('snake-text-color');\n      this.ctx.fillText(scoreText, 5, this.height - 5);\n      this.keyIsPressed = false;\n    }\n\n    this.loop = requestAnimationFrame(() => this.paint());\n  }\n\n  paintCell(x, y, color) {\n    this.ctx.fillStyle = color;\n    this.ctx.fillRect(x * this.grid.cell.width, y * this.grid.cell.height, this.grid.cell.width, this.grid.cell.height);\n    this.ctx.strokeStyle = this.getColor('snake-border-color');\n    this.ctx.strokeRect(x * this.grid.cell.width, y * this.grid.cell.height, this.grid.cell.width, this.grid.cell.height);\n  }\n\n  checkCollision(x, y, array) {\n    for (let i = 0; i < array.length; i++) {\n      if (array[i].x == x && array[i].y == y) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reverse() {\n    const tail = this.snakeArray.length - 1;\n    if (this.snakeArray[tail].x < this.snakeArray[tail - 1].x) this.direction = 'left';else if (this.snakeArray[tail].x > this.snakeArray[tail - 1].x) this.direction = 'right';else if (this.snakeArray[tail].y < this.snakeArray[tail - 1].y) this.direction = 'up';else if (this.snakeArray[tail].y > this.snakeArray[tail - 1].y) this.direction = 'down';\n    this.snakeArray.reverse();\n  }\n\n  attachControls() {\n    document.addEventListener('keydown', e => {\n      const key = e.keyCode;\n\n      if (!this.keyIsPressed) {\n        if (key == 37 && this.direction != \"right\") this.direction = \"left\";else if (key == 38 && this.direction != \"down\") this.direction = \"up\";else if (key == 39 && this.direction != \"left\") this.direction = \"right\";else if (key == 40 && this.direction != \"up\") this.direction = \"down\";else if (key == 67) this.reverse();\n      }\n\n      if ([37, 38, 39, 40, 67].includes(key)) {\n        e.preventDefault();\n        this.keyIsPressed = true;\n      }\n    });\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/snake.js\n");

/***/ })

})