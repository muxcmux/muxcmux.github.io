webpackHotUpdate("app",{

/***/ "./js/snake.js":
/*!*********************!*\
  !*** ./js/snake.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// class Snake {\n//   constructor(element) {\n//     this.element = element;\n//     this.canvas = element.getElementsByTagName('canvas')[0];\n//     this.setupCanvas();\n//     this.setupGrid();\n//     this.beginModal = element.getElementsByClassName('snake-begin-modal')[0];\n//     this.endModal = element.getElementsByClassName('snake-end-modal')[0];\n//     this.hiScore = element.getElementsByClassName('snake-hi-score')[0];\n//     this.keyIsPressed = false;\n//     this.baseSpeed = 8;\n//     this.speedGainPerLevel = 4;\n//     this.then = Date.now();\n//     this.snakeArray;\n//     this.direction, this.food;\n//     this.score, this.level, this.speed;\n//     this.now, this.then, this.elapsed, this.msPerFrame;\n//   }\n//   done() {\n//     this.endModal.classList.add('invisible');\n//   }\n//   countdown() {\n//     this.beginModal.classList.remove('invisible');\n//     const text = [3, 2, 1, 'Go!'];\n//     setTimeout(function() {\n//       this.beginModal.classList.add('invisible');\n//       init();\n//     }, 1e3 * text.length + 1);\n//     for (let i = 0; i < text.length; i++) {\n//       setTimeout(function() {\n//         this.beginModal.textContent = text[i];\n//       }, 1e3 * i);\n//     }\n//   }\n//   getColor(color) {\n//     return window.getComputedStyle(this.element.getElementsByClassName(color)[0]).color;\n//   }\n//   setupGrid() {\n//     const idealCell = { width: 20, height: 20 };\n//     const gridWidth = Math.round(width / idealCell.width);\n//     const cellWidth = width / gridWidth;\n//     const gridHeight = Math.round(height / idealCell.height);\n//     const cellHeight = height / gridHeight;\n//     const slots = [];\n//     for (let i = 0; i < gridWidth; i++) {\n//       for (let j = 0; j < gridHeight; j++) {\n//         slots.push({ x: i, y: j });\n//       }\n//     }\n//     this.grid = {\n//       slots,\n//       width: gridWidth,\n//       height: gridHeight,\n//       cell: {\n//         width: cellWidth,\n//         height: cellHeight,\n//       },\n//     }\n//   }\n//   setupCanvas() {\n//     const dpr = window.devicePixelRatio || 1;\n//     const rect = this.canvas.getBoundingClientRect();\n//     const rectWidth = rect.width;\n//     const rectHeight = rect.height;\n//     this.canvas.width = rectWidth * dpr;\n//     this.canvas.height = rectHeight * dpr;\n//     this.canvas.style.width = rectWidth + 'px';\n//     this.canvas.style.height = rectHeight + 'px';\n//     this.ctx = this.canvas.getContext('2d');\n//     this.ctx.scale(dpr, dpr);\n//     this.width = rectWidth;\n//     this.height = rectHeight;\n//   }\n//   init() {\n//     this.direction = \"right\";\n//     this.score = 0;\n//     this.level = 0;\n//     this.increaseLevel();\n//     this.createSnake();\n//     this.createFood();\n//     requestAnimationFrame(this.paint);\n//   }\n//   increaseLevel() {\n//     this.level += 1;\n//     this.speed = this.baseSpeed + this.level * this.speedGainPerLevel;\n//     this.msPerFrame = 1000 / this.speed;\n//   }\n//   createSnake() {\n//     this.snakeArray = [];\n//     const length = 5;\n//     const center = {\n//       x: ~~(this.grid.width / 2),\n//       y: ~~(this.grid.height / 2),\n//     }\n//     for(let i = length - 1; i >= 0; i--) {\n//       this.snakeArray.push({ x: center.x + i, y: center.y });\n//     }\n//   }\n//   getAvailableSlots() {\n//     const availableSlots = [];\n//     for (let i = 0; i < this.grid.slots.length; i++) {\n//       const slot = this.grid.slots[i];\n//       for (let s = 0; s < this.snakeArray.length; s++) {\n//         const snake = this.snakeArray[s];\n//         if (snake.x != slot.x && snake.y != slot.y) {\n//           availableSlots.push(slot);\n//         }\n//       }\n//     }\n//     return availableSlots;\n//   }\n//   createFood() {\n//     const slots = this.getAvailableSlots();\n//     this.food = slots[~~(Math.random() * (slots.length - 1))];\n//   }\n//   blowUp(cell) {\n//     cancelAnimationFrame(this.paint);\n//     for (let i = cell; i < this.snakeArray.length; i++) {\n//       this.paintCell(this.snakeArray[i].x, this.snakeArray[i].y, this.getColor('snake-cell-color'));\n//     }\n//     if (cell != this.snakeArray.length) {\n//       this.paintCell(this.snakeArray[cell].x, this.snakeArray[cell].y, this.getColor('snake-dead-color'));\n//       setTimeout(function() {\n//         this.blowUp(cell + 1);\n//       }, 20);\n//     } else {\n//       if (this.score < 10) txt = \"Weak.\"\n//       if (this.score >= 10 && this.score < 20) txt = \"Srsly?\"\n//       if (this.score >= 20 && this.score < 30) txt = \"Not bad!\"\n//       if (this.score >= 30 && this.score < 40) txt = \"Awesome!\"\n//       if (this.score >= 40 && this.score < 50) txt = \"Insane!\"\n//       if (this.score >= 50) txt = \"Get a life.\"\n//       this.hiScore.textContent = (txt + \" Hi score: \" + score);\n//       this.endModal.classList.remove('invisible');\n//     }\n//   }\n//   paint() {\n//     this.now = Date.now();\n//     elapsed = this.now - this.then;\n//     if (elapsed > this.msPerFrame) {\n//       this.then = this.now - (elapsed % this.msPerFrame);\n//       this.ctx.clearRect(0, 0, this.width, this.height);\n//       let nx = this.snakeArray[0].x;\n//       let ny = this.snakeArray[0].y;\n//       if (this.direction == \"right\") nx++;\n//       else if (this.direction == \"left\") nx--;\n//       else if (this.direction == \"up\") ny--;\n//       else if (this.direction == \"down\") ny++;\n//       if (nx <= -1\n//           || nx >= this.grid.width\n//           || ny <= -1\n//           || ny >= this.grid.height\n//           || this.checkCollision(nx, ny, this.snakeArray)) {\n//         // Game over\n//         this.blowUp(0);\n//         return;\n//       }\n//       let tail;\n//       if (nx == food.x && ny == food.y) {\n//         tail = { x: nx, y: ny };\n//         this.score++;\n//         if (!(this.score % 10)) increaseLevel();\n//         // increaseLevel();\n//         createFood();\n//       } else {\n//         tail = this.snakeArray.pop();\n//         tail.x = nx; tail.y = ny;\n//       }\n//       this.snakeArray.unshift(tail);\n//       for (let i = 0; i < this.snakeArray.length; i++) {\n//         this.paintCell(this.snakeArray[i].x, this.snakeArray[i].y, this.getColor('snake-cell-color'));\n//       }\n//       this.paintCell(this.food.x, this.food.y, this.getColor('snake-food-color'));\n//       const scoreText = \"Level: \" + this.level + \" Score: \" + this.score;\n//       this.ctx.font = 'normal 12pt Menlo, Consolas, Courier';\n//       this.ctx.textAlign = 'left';\n//       this.ctx.fillStyle = getColor('snake-text-color');\n//       this.ctx.fillText(scoreText, 5, this.height - 5);\n//       this.keyIsPressed = false;\n//     }\n//     requestAnimationFrame(this.paint);\n//   }\n//   paintCell(x, y, color) {\n//     this.ctx.fillStyle = color;\n//     this.ctx.fillRect(x * this.grid.cell.width, y * this.grid.cell.height, this.grid.cell.width, this.grid.cell.height);\n//     this.ctx.strokeStyle = this.getColor('snake-border-color');\n//     this.ctx.strokeRect(x * this.grid.cell.width, y * this.grid.cell.height, this.grid.cell.width, this.grid.cell.height);\n//   }\n//   checkCollision(x, y, array) {\n//     for (let i = 0; i < array.length; i++) {\n//       if (array[i].x == x && array[i].y == y) {\n//         return true;\n//       }\n//     }\n//     return false;\n//   }\n//   reverse() {\n//     const tail = this.snakeArray.length - 1;\n//     if (this.snakeArray[tail].x < this.snakeArray[tail-1].x) this.direction = 'left';\n//     else if (this.snakeArray[tail].x > this.snakeArray[tail-1].x) this.direction = 'right';\n//     else if (this.snakeArray[tail].y < this.snakeArray[tail-1].y) this.direction = 'up';\n//     else if (this.snakeArray[tail].y > this.snakeArray[tail-1].y) this.direction = 'down';\n//     this.snakeArray.reverse();\n//   }\n//   attachControls() {\n//     document.addEventListener('keydown', function(e) {\n//       const key = e.keyCode;\n//       if (!keyIsPressed) {\n//         if (key == 37 && this.direction != \"right\") this.direction = \"left\";\n//         else if(key == 38 && this.direction != \"down\") this.direction = \"up\";\n//         else if(key == 39 && this.direction != \"left\") this.direction = \"right\";\n//         else if(key == 40 && this.direction != \"up\") this.direction = \"down\";\n//         else if(key == 67) this.reverse();\n//       }\n//       if ([37, 38, 39, 40, 67].includes(key)) {\n//         e.preventDefault();\n//         this.keyIsPressed = true;\n//       }\n//     });\n//   }\n// }\n// window.Snake = new Snake(document.getElementById('snake'));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9qcy9zbmFrZS5qcz9mOGMyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSIsImZpbGUiOiIuL2pzL3NuYWtlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY2xhc3MgU25ha2Uge1xuLy8gICBjb25zdHJ1Y3RvcihlbGVtZW50KSB7XG4vLyAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbi8vICAgICB0aGlzLmNhbnZhcyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NhbnZhcycpWzBdO1xuLy8gICAgIHRoaXMuc2V0dXBDYW52YXMoKTtcbi8vICAgICB0aGlzLnNldHVwR3JpZCgpO1xuXG4vLyAgICAgdGhpcy5iZWdpbk1vZGFsID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzbmFrZS1iZWdpbi1tb2RhbCcpWzBdO1xuLy8gICAgIHRoaXMuZW5kTW9kYWwgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NuYWtlLWVuZC1tb2RhbCcpWzBdO1xuLy8gICAgIHRoaXMuaGlTY29yZSA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc25ha2UtaGktc2NvcmUnKVswXTtcblxuLy8gICAgIHRoaXMua2V5SXNQcmVzc2VkID0gZmFsc2U7XG4vLyAgICAgdGhpcy5iYXNlU3BlZWQgPSA4O1xuLy8gICAgIHRoaXMuc3BlZWRHYWluUGVyTGV2ZWwgPSA0O1xuLy8gICAgIHRoaXMudGhlbiA9IERhdGUubm93KCk7XG4vLyAgICAgdGhpcy5zbmFrZUFycmF5O1xuXG4vLyAgICAgdGhpcy5kaXJlY3Rpb24sIHRoaXMuZm9vZDtcblxuLy8gICAgIHRoaXMuc2NvcmUsIHRoaXMubGV2ZWwsIHRoaXMuc3BlZWQ7XG4vLyAgICAgdGhpcy5ub3csIHRoaXMudGhlbiwgdGhpcy5lbGFwc2VkLCB0aGlzLm1zUGVyRnJhbWU7XG4vLyAgIH1cblxuLy8gICBkb25lKCkge1xuLy8gICAgIHRoaXMuZW5kTW9kYWwuY2xhc3NMaXN0LmFkZCgnaW52aXNpYmxlJyk7XG4vLyAgIH1cblxuLy8gICBjb3VudGRvd24oKSB7XG4vLyAgICAgdGhpcy5iZWdpbk1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmlzaWJsZScpO1xuLy8gICAgIGNvbnN0IHRleHQgPSBbMywgMiwgMSwgJ0dvISddO1xuXG4vLyAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbi8vICAgICAgIHRoaXMuYmVnaW5Nb2RhbC5jbGFzc0xpc3QuYWRkKCdpbnZpc2libGUnKTtcbi8vICAgICAgIGluaXQoKTtcbi8vICAgICB9LCAxZTMgKiB0ZXh0Lmxlbmd0aCArIDEpO1xuXG4vLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICB0aGlzLmJlZ2luTW9kYWwudGV4dENvbnRlbnQgPSB0ZXh0W2ldO1xuLy8gICAgICAgfSwgMWUzICogaSk7XG4vLyAgICAgfVxuLy8gICB9XG5cbi8vICAgZ2V0Q29sb3IoY29sb3IpIHtcbi8vICAgICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY29sb3IpWzBdKS5jb2xvcjtcbi8vICAgfVxuXG4vLyAgIHNldHVwR3JpZCgpIHtcbi8vICAgICBjb25zdCBpZGVhbENlbGwgPSB7IHdpZHRoOiAyMCwgaGVpZ2h0OiAyMCB9O1xuXG4vLyAgICAgY29uc3QgZ3JpZFdpZHRoID0gTWF0aC5yb3VuZCh3aWR0aCAvIGlkZWFsQ2VsbC53aWR0aCk7XG4vLyAgICAgY29uc3QgY2VsbFdpZHRoID0gd2lkdGggLyBncmlkV2lkdGg7XG5cbi8vICAgICBjb25zdCBncmlkSGVpZ2h0ID0gTWF0aC5yb3VuZChoZWlnaHQgLyBpZGVhbENlbGwuaGVpZ2h0KTtcbi8vICAgICBjb25zdCBjZWxsSGVpZ2h0ID0gaGVpZ2h0IC8gZ3JpZEhlaWdodDtcblxuLy8gICAgIGNvbnN0IHNsb3RzID0gW107XG4vLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncmlkV2lkdGg7IGkrKykge1xuLy8gICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncmlkSGVpZ2h0OyBqKyspIHtcbi8vICAgICAgICAgc2xvdHMucHVzaCh7IHg6IGksIHk6IGogfSk7XG4vLyAgICAgICB9XG4vLyAgICAgfVxuXG4vLyAgICAgdGhpcy5ncmlkID0ge1xuLy8gICAgICAgc2xvdHMsXG4vLyAgICAgICB3aWR0aDogZ3JpZFdpZHRoLFxuLy8gICAgICAgaGVpZ2h0OiBncmlkSGVpZ2h0LFxuLy8gICAgICAgY2VsbDoge1xuLy8gICAgICAgICB3aWR0aDogY2VsbFdpZHRoLFxuLy8gICAgICAgICBoZWlnaHQ6IGNlbGxIZWlnaHQsXG4vLyAgICAgICB9LFxuLy8gICAgIH1cbi8vICAgfVxuXG4vLyAgIHNldHVwQ2FudmFzKCkge1xuLy8gICAgIGNvbnN0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG4vLyAgICAgY29uc3QgcmVjdCA9IHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuLy8gICAgIGNvbnN0IHJlY3RXaWR0aCA9IHJlY3Qud2lkdGg7XG4vLyAgICAgY29uc3QgcmVjdEhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuXG4vLyAgICAgdGhpcy5jYW52YXMud2lkdGggPSByZWN0V2lkdGggKiBkcHI7XG4vLyAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gcmVjdEhlaWdodCAqIGRwcjtcbi8vICAgICB0aGlzLmNhbnZhcy5zdHlsZS53aWR0aCA9IHJlY3RXaWR0aCArICdweCc7XG4vLyAgICAgdGhpcy5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gcmVjdEhlaWdodCArICdweCc7XG5cbi8vICAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4vLyAgICAgdGhpcy5jdHguc2NhbGUoZHByLCBkcHIpO1xuXG4vLyAgICAgdGhpcy53aWR0aCA9IHJlY3RXaWR0aDtcbi8vICAgICB0aGlzLmhlaWdodCA9IHJlY3RIZWlnaHQ7XG4vLyAgIH1cblxuLy8gICBpbml0KCkge1xuLy8gICAgIHRoaXMuZGlyZWN0aW9uID0gXCJyaWdodFwiO1xuLy8gICAgIHRoaXMuc2NvcmUgPSAwO1xuLy8gICAgIHRoaXMubGV2ZWwgPSAwO1xuLy8gICAgIHRoaXMuaW5jcmVhc2VMZXZlbCgpO1xuLy8gICAgIHRoaXMuY3JlYXRlU25ha2UoKTtcbi8vICAgICB0aGlzLmNyZWF0ZUZvb2QoKTtcbi8vICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5wYWludCk7XG4vLyAgIH1cblxuLy8gICBpbmNyZWFzZUxldmVsKCkge1xuLy8gICAgIHRoaXMubGV2ZWwgKz0gMTtcbi8vICAgICB0aGlzLnNwZWVkID0gdGhpcy5iYXNlU3BlZWQgKyB0aGlzLmxldmVsICogdGhpcy5zcGVlZEdhaW5QZXJMZXZlbDtcbi8vICAgICB0aGlzLm1zUGVyRnJhbWUgPSAxMDAwIC8gdGhpcy5zcGVlZDtcbi8vICAgfVxuXG4vLyAgIGNyZWF0ZVNuYWtlKCkge1xuLy8gICAgIHRoaXMuc25ha2VBcnJheSA9IFtdO1xuLy8gICAgIGNvbnN0IGxlbmd0aCA9IDU7XG4vLyAgICAgY29uc3QgY2VudGVyID0ge1xuLy8gICAgICAgeDogfn4odGhpcy5ncmlkLndpZHRoIC8gMiksXG4vLyAgICAgICB5OiB+fih0aGlzLmdyaWQuaGVpZ2h0IC8gMiksXG4vLyAgICAgfVxuLy8gICAgIGZvcihsZXQgaSA9IGxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4vLyAgICAgICB0aGlzLnNuYWtlQXJyYXkucHVzaCh7IHg6IGNlbnRlci54ICsgaSwgeTogY2VudGVyLnkgfSk7XG4vLyAgICAgfVxuLy8gICB9XG5cbi8vICAgZ2V0QXZhaWxhYmxlU2xvdHMoKSB7XG4vLyAgICAgY29uc3QgYXZhaWxhYmxlU2xvdHMgPSBbXTtcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZ3JpZC5zbG90cy5sZW5ndGg7IGkrKykge1xuLy8gICAgICAgY29uc3Qgc2xvdCA9IHRoaXMuZ3JpZC5zbG90c1tpXTtcbi8vICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgdGhpcy5zbmFrZUFycmF5Lmxlbmd0aDsgcysrKSB7XG4vLyAgICAgICAgIGNvbnN0IHNuYWtlID0gdGhpcy5zbmFrZUFycmF5W3NdO1xuLy8gICAgICAgICBpZiAoc25ha2UueCAhPSBzbG90LnggJiYgc25ha2UueSAhPSBzbG90LnkpIHtcbi8vICAgICAgICAgICBhdmFpbGFibGVTbG90cy5wdXNoKHNsb3QpO1xuLy8gICAgICAgICB9XG4vLyAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiBhdmFpbGFibGVTbG90cztcbi8vICAgfVxuXG4vLyAgIGNyZWF0ZUZvb2QoKSB7XG4vLyAgICAgY29uc3Qgc2xvdHMgPSB0aGlzLmdldEF2YWlsYWJsZVNsb3RzKCk7XG4vLyAgICAgdGhpcy5mb29kID0gc2xvdHNbfn4oTWF0aC5yYW5kb20oKSAqIChzbG90cy5sZW5ndGggLSAxKSldO1xuLy8gICB9XG5cbi8vICAgYmxvd1VwKGNlbGwpIHtcbi8vICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLnBhaW50KTtcblxuLy8gICAgIGZvciAobGV0IGkgPSBjZWxsOyBpIDwgdGhpcy5zbmFrZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICB0aGlzLnBhaW50Q2VsbCh0aGlzLnNuYWtlQXJyYXlbaV0ueCwgdGhpcy5zbmFrZUFycmF5W2ldLnksIHRoaXMuZ2V0Q29sb3IoJ3NuYWtlLWNlbGwtY29sb3InKSk7XG4vLyAgICAgfVxuXG4vLyAgICAgaWYgKGNlbGwgIT0gdGhpcy5zbmFrZUFycmF5Lmxlbmd0aCkge1xuLy8gICAgICAgdGhpcy5wYWludENlbGwodGhpcy5zbmFrZUFycmF5W2NlbGxdLngsIHRoaXMuc25ha2VBcnJheVtjZWxsXS55LCB0aGlzLmdldENvbG9yKCdzbmFrZS1kZWFkLWNvbG9yJykpO1xuLy8gICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbi8vICAgICAgICAgdGhpcy5ibG93VXAoY2VsbCArIDEpO1xuLy8gICAgICAgfSwgMjApO1xuLy8gICAgIH0gZWxzZSB7XG5cbi8vICAgICAgIGlmICh0aGlzLnNjb3JlIDwgMTApIHR4dCA9IFwiV2Vhay5cIlxuLy8gICAgICAgaWYgKHRoaXMuc2NvcmUgPj0gMTAgJiYgdGhpcy5zY29yZSA8IDIwKSB0eHQgPSBcIlNyc2x5P1wiXG4vLyAgICAgICBpZiAodGhpcy5zY29yZSA+PSAyMCAmJiB0aGlzLnNjb3JlIDwgMzApIHR4dCA9IFwiTm90IGJhZCFcIlxuLy8gICAgICAgaWYgKHRoaXMuc2NvcmUgPj0gMzAgJiYgdGhpcy5zY29yZSA8IDQwKSB0eHQgPSBcIkF3ZXNvbWUhXCJcbi8vICAgICAgIGlmICh0aGlzLnNjb3JlID49IDQwICYmIHRoaXMuc2NvcmUgPCA1MCkgdHh0ID0gXCJJbnNhbmUhXCJcbi8vICAgICAgIGlmICh0aGlzLnNjb3JlID49IDUwKSB0eHQgPSBcIkdldCBhIGxpZmUuXCJcbi8vICAgICAgIHRoaXMuaGlTY29yZS50ZXh0Q29udGVudCA9ICh0eHQgKyBcIiBIaSBzY29yZTogXCIgKyBzY29yZSk7XG4vLyAgICAgICB0aGlzLmVuZE1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ2ludmlzaWJsZScpO1xuLy8gICAgIH1cbi8vICAgfVxuXG4vLyAgIHBhaW50KCkge1xuLy8gICAgIHRoaXMubm93ID0gRGF0ZS5ub3coKTtcbi8vICAgICBlbGFwc2VkID0gdGhpcy5ub3cgLSB0aGlzLnRoZW47XG4vLyAgICAgaWYgKGVsYXBzZWQgPiB0aGlzLm1zUGVyRnJhbWUpIHtcbi8vICAgICAgIHRoaXMudGhlbiA9IHRoaXMubm93IC0gKGVsYXBzZWQgJSB0aGlzLm1zUGVyRnJhbWUpO1xuLy8gICAgICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblxuLy8gICAgICAgbGV0IG54ID0gdGhpcy5zbmFrZUFycmF5WzBdLng7XG4vLyAgICAgICBsZXQgbnkgPSB0aGlzLnNuYWtlQXJyYXlbMF0ueTtcblxuLy8gICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09IFwicmlnaHRcIikgbngrKztcbi8vICAgICAgIGVsc2UgaWYgKHRoaXMuZGlyZWN0aW9uID09IFwibGVmdFwiKSBueC0tO1xuLy8gICAgICAgZWxzZSBpZiAodGhpcy5kaXJlY3Rpb24gPT0gXCJ1cFwiKSBueS0tO1xuLy8gICAgICAgZWxzZSBpZiAodGhpcy5kaXJlY3Rpb24gPT0gXCJkb3duXCIpIG55Kys7XG5cbi8vICAgICAgIGlmIChueCA8PSAtMVxuLy8gICAgICAgICAgIHx8IG54ID49IHRoaXMuZ3JpZC53aWR0aFxuLy8gICAgICAgICAgIHx8IG55IDw9IC0xXG4vLyAgICAgICAgICAgfHwgbnkgPj0gdGhpcy5ncmlkLmhlaWdodFxuLy8gICAgICAgICAgIHx8IHRoaXMuY2hlY2tDb2xsaXNpb24obngsIG55LCB0aGlzLnNuYWtlQXJyYXkpKSB7XG4vLyAgICAgICAgIC8vIEdhbWUgb3ZlclxuLy8gICAgICAgICB0aGlzLmJsb3dVcCgwKTtcbi8vICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgfVxuXG4vLyAgICAgICBsZXQgdGFpbDtcbi8vICAgICAgIGlmIChueCA9PSBmb29kLnggJiYgbnkgPT0gZm9vZC55KSB7XG4vLyAgICAgICAgIHRhaWwgPSB7IHg6IG54LCB5OiBueSB9O1xuLy8gICAgICAgICB0aGlzLnNjb3JlKys7XG4vLyAgICAgICAgIGlmICghKHRoaXMuc2NvcmUgJSAxMCkpIGluY3JlYXNlTGV2ZWwoKTtcbi8vICAgICAgICAgLy8gaW5jcmVhc2VMZXZlbCgpO1xuLy8gICAgICAgICBjcmVhdGVGb29kKCk7XG4vLyAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICB0YWlsID0gdGhpcy5zbmFrZUFycmF5LnBvcCgpO1xuLy8gICAgICAgICB0YWlsLnggPSBueDsgdGFpbC55ID0gbnk7XG4vLyAgICAgICB9XG5cbi8vICAgICAgIHRoaXMuc25ha2VBcnJheS51bnNoaWZ0KHRhaWwpO1xuXG4vLyAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc25ha2VBcnJheS5sZW5ndGg7IGkrKykge1xuLy8gICAgICAgICB0aGlzLnBhaW50Q2VsbCh0aGlzLnNuYWtlQXJyYXlbaV0ueCwgdGhpcy5zbmFrZUFycmF5W2ldLnksIHRoaXMuZ2V0Q29sb3IoJ3NuYWtlLWNlbGwtY29sb3InKSk7XG4vLyAgICAgICB9XG5cbi8vICAgICAgIHRoaXMucGFpbnRDZWxsKHRoaXMuZm9vZC54LCB0aGlzLmZvb2QueSwgdGhpcy5nZXRDb2xvcignc25ha2UtZm9vZC1jb2xvcicpKTtcbi8vICAgICAgIGNvbnN0IHNjb3JlVGV4dCA9IFwiTGV2ZWw6IFwiICsgdGhpcy5sZXZlbCArIFwiIFNjb3JlOiBcIiArIHRoaXMuc2NvcmU7XG4vLyAgICAgICB0aGlzLmN0eC5mb250ID0gJ25vcm1hbCAxMnB0IE1lbmxvLCBDb25zb2xhcywgQ291cmllcic7XG4vLyAgICAgICB0aGlzLmN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG4vLyAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBnZXRDb2xvcignc25ha2UtdGV4dC1jb2xvcicpO1xuLy8gICAgICAgdGhpcy5jdHguZmlsbFRleHQoc2NvcmVUZXh0LCA1LCB0aGlzLmhlaWdodCAtIDUpO1xuLy8gICAgICAgdGhpcy5rZXlJc1ByZXNzZWQgPSBmYWxzZTtcbi8vICAgICB9XG5cbi8vICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5wYWludCk7XG4vLyAgIH1cblxuLy8gICBwYWludENlbGwoeCwgeSwgY29sb3IpIHtcbi8vICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbi8vICAgICB0aGlzLmN0eC5maWxsUmVjdCh4ICogdGhpcy5ncmlkLmNlbGwud2lkdGgsIHkgKiB0aGlzLmdyaWQuY2VsbC5oZWlnaHQsIHRoaXMuZ3JpZC5jZWxsLndpZHRoLCB0aGlzLmdyaWQuY2VsbC5oZWlnaHQpO1xuLy8gICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5nZXRDb2xvcignc25ha2UtYm9yZGVyLWNvbG9yJyk7XG4vLyAgICAgdGhpcy5jdHguc3Ryb2tlUmVjdCh4ICogdGhpcy5ncmlkLmNlbGwud2lkdGgsIHkgKiB0aGlzLmdyaWQuY2VsbC5oZWlnaHQsIHRoaXMuZ3JpZC5jZWxsLndpZHRoLCB0aGlzLmdyaWQuY2VsbC5oZWlnaHQpO1xuLy8gICB9XG5cbi8vICAgY2hlY2tDb2xsaXNpb24oeCwgeSwgYXJyYXkpIHtcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICBpZiAoYXJyYXlbaV0ueCA9PSB4ICYmIGFycmF5W2ldLnkgPT0geSkge1xuLy8gICAgICAgICByZXR1cm4gdHJ1ZTtcbi8vICAgICAgIH1cbi8vICAgICB9XG4vLyAgICAgcmV0dXJuIGZhbHNlO1xuLy8gICB9XG5cbi8vICAgcmV2ZXJzZSgpIHtcbi8vICAgICBjb25zdCB0YWlsID0gdGhpcy5zbmFrZUFycmF5Lmxlbmd0aCAtIDE7XG4vLyAgICAgaWYgKHRoaXMuc25ha2VBcnJheVt0YWlsXS54IDwgdGhpcy5zbmFrZUFycmF5W3RhaWwtMV0ueCkgdGhpcy5kaXJlY3Rpb24gPSAnbGVmdCc7XG4vLyAgICAgZWxzZSBpZiAodGhpcy5zbmFrZUFycmF5W3RhaWxdLnggPiB0aGlzLnNuYWtlQXJyYXlbdGFpbC0xXS54KSB0aGlzLmRpcmVjdGlvbiA9ICdyaWdodCc7XG4vLyAgICAgZWxzZSBpZiAodGhpcy5zbmFrZUFycmF5W3RhaWxdLnkgPCB0aGlzLnNuYWtlQXJyYXlbdGFpbC0xXS55KSB0aGlzLmRpcmVjdGlvbiA9ICd1cCc7XG4vLyAgICAgZWxzZSBpZiAodGhpcy5zbmFrZUFycmF5W3RhaWxdLnkgPiB0aGlzLnNuYWtlQXJyYXlbdGFpbC0xXS55KSB0aGlzLmRpcmVjdGlvbiA9ICdkb3duJztcbi8vICAgICB0aGlzLnNuYWtlQXJyYXkucmV2ZXJzZSgpO1xuLy8gICB9XG5cbi8vICAgYXR0YWNoQ29udHJvbHMoKSB7XG4vLyAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGUpIHtcbi8vICAgICAgIGNvbnN0IGtleSA9IGUua2V5Q29kZTtcblxuLy8gICAgICAgaWYgKCFrZXlJc1ByZXNzZWQpIHtcbi8vICAgICAgICAgaWYgKGtleSA9PSAzNyAmJiB0aGlzLmRpcmVjdGlvbiAhPSBcInJpZ2h0XCIpIHRoaXMuZGlyZWN0aW9uID0gXCJsZWZ0XCI7XG4vLyAgICAgICAgIGVsc2UgaWYoa2V5ID09IDM4ICYmIHRoaXMuZGlyZWN0aW9uICE9IFwiZG93blwiKSB0aGlzLmRpcmVjdGlvbiA9IFwidXBcIjtcbi8vICAgICAgICAgZWxzZSBpZihrZXkgPT0gMzkgJiYgdGhpcy5kaXJlY3Rpb24gIT0gXCJsZWZ0XCIpIHRoaXMuZGlyZWN0aW9uID0gXCJyaWdodFwiO1xuLy8gICAgICAgICBlbHNlIGlmKGtleSA9PSA0MCAmJiB0aGlzLmRpcmVjdGlvbiAhPSBcInVwXCIpIHRoaXMuZGlyZWN0aW9uID0gXCJkb3duXCI7XG4vLyAgICAgICAgIGVsc2UgaWYoa2V5ID09IDY3KSB0aGlzLnJldmVyc2UoKTtcbi8vICAgICAgIH1cblxuLy8gICAgICAgaWYgKFszNywgMzgsIDM5LCA0MCwgNjddLmluY2x1ZGVzKGtleSkpIHtcbi8vICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gICAgICAgICB0aGlzLmtleUlzUHJlc3NlZCA9IHRydWU7XG4vLyAgICAgICB9XG4vLyAgICAgfSk7XG4vLyAgIH1cbi8vIH1cblxuLy8gd2luZG93LlNuYWtlID0gbmV3IFNuYWtlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzbmFrZScpKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/snake.js\n");

/***/ })

})